"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const core_1 = require("@aws-cdk/core");
const aws_rds_1 = require("@aws-cdk/aws-rds");
const aws_iam_1 = require("@aws-cdk/aws-iam");
const aws_ec2_1 = require("@aws-cdk/aws-ec2");
const aws_ecs_1 = require("@aws-cdk/aws-ecs");
const aws_ecs_patterns_1 = require("@aws-cdk/aws-ecs-patterns");
const appName = "Exitus";
const envName = process.env.ENV_NAME || 'dev';
const dbPort = 5432;
class VPCStack extends core_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        // Network to run everything in
        this.vpc = new aws_ec2_1.Vpc(this, `${appName}Vpc`, {
            cidr: "10.0.0.0/16",
            maxAzs: 2,
            natGateways: 1,
            subnetConfiguration: [
                {
                    name: `${appName.toLowerCase()}-${envName}-public`,
                    subnetType: aws_ec2_1.SubnetType.PUBLIC,
                },
                {
                    name: `${appName.toLowerCase()}-${envName}-private`,
                    subnetType: aws_ec2_1.SubnetType.PRIVATE,
                },
                {
                    name: `${appName.toLowerCase()}-${envName}-isolated`,
                    subnetType: aws_ec2_1.SubnetType.ISOLATED,
                },
            ]
        });
    }
}
class RDSStack extends core_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        this.db = new aws_rds_1.DatabaseInstance(this, `${appName}DB`, {
            databaseName: appName.toLowerCase(),
            masterUsername: appName.toLowerCase(),
            engine: aws_rds_1.DatabaseInstanceEngine.POSTGRES,
            instanceClass: aws_ec2_1.InstanceType.of(aws_ec2_1.InstanceClass.BURSTABLE2, aws_ec2_1.InstanceSize.SMALL),
            vpc: props.vpc,
            vpcPlacement: {
                subnetType: aws_ec2_1.SubnetType.PRIVATE
            },
            port: dbPort,
        });
    }
}
class ServiceStack extends core_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const cluster = new aws_ecs_1.Cluster(this, `${appName}Cluster`, { vpc: props.vpc });
        const executionRole = new aws_iam_1.Role(this, `${appName}ExecutionRole`, {
            assumedBy: new aws_iam_1.ServicePrincipal('ecs-tasks.amazonaws.com'),
            managedPolicies: [
                aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName('service-role/AmazonECSTaskExecutionRolePolicy')
            ]
        });
        const taskRole = new aws_iam_1.Role(this, `${appName}TaskRole`, {
            assumedBy: new aws_iam_1.ServicePrincipal('ecs-tasks.amazonaws.com'),
        });
        const containerSvc = new aws_ecs_patterns_1.LoadBalancedFargateService(this, `${appName}FargateService`, {
            cluster,
            image: aws_ecs_1.ContainerImage.fromAsset(path_1.resolve(__dirname, './deploy')),
            environment: {
                DB_USERNAME: props.db.secret.secretValueFromJson('username').toString(),
                DB_PASSWORD: props.db.secret.secretValueFromJson('password').toString(),
                DB_HOST: props.db.secret.secretValueFromJson('host').toString(),
                DB_PORT: props.db.secret.secretValueFromJson('port').toString(),
                DB_DATABASE: appName.toLowerCase(),
            },
            executionRole,
            taskRole,
        });
        containerSvc.service.connections.allowTo(props.db, aws_ec2_1.Port.tcp(dbPort));
    }
}
const app = new core_1.App();
const vpcStack = new VPCStack(app, `${appName.toLowerCase()}-vpc-${envName}`, {});
const rdsStack = new RDSStack(app, `${appName.toLowerCase()}-rds-${envName}`, {
    vpc: vpcStack.vpc,
});
new ServiceStack(app, `${appName.toLowerCase()}-service-${envName}`, {
    vpc: vpcStack.vpc,
    db: rdsStack.db,
});
app.synth();
//# sourceMappingURL=data:application/json;base64,