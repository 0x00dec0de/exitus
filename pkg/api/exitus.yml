openapi: "3.0.2"
info:
  title: "Issues API"
  description: |
    This API enables raising, commenting and voting on issues.
  version: "1.0"
  termsOfService: "https://issues.wolfe.id.au/terms"
  contact:
    name: "Store API"
    url: "https://issues.wolfe.id.au/api"
    email: "mark@wolfe.id.au"
  license:
    name: "CC Attribution-ShareAlike 4.0 (CC BY-SA 4.0)"
    url: "https://issues.wolfe.id.au/license"
servers:
  - url: https://api.issues.wolfe.id.au/v1
    description: Production server
paths:
  /customers:
    post:
      summary: "Create a customer."
      operationId: NewCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCustomer'
      responses:
        '201':
          description: customer created response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
    get:
      summary: "Get a list of customers."
      operationId: Customers
      parameters:
        - $ref: '#/components/parameters/q'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: customers response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomersPage'
  /customers/{id}:
    get:
      description: Returns a customer based on it's identifier.
      operationId: GetCustomer
      parameters:
        - name: id
          in: path
          description: Identifier of customer to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: customer response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
    put:
      summary: "Update a customer."
      operationId: UpdateCustomer
      parameters:
        - name: id
          in: path
          description: Identifier of customer to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatedCustomer'
      responses:
        '201':
          description: customer updated response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
  /projects:
    post:
      summary: "Create a project."
      operationId: NewProject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProject'
      responses:
        '201':
          description: project created response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
    get:
      summary: "Get a list of projects."
      operationId: Projects
      parameters:
        - $ref: '#/components/parameters/q'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: projects response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectsPage'
  /projects/{id}:
    get:
      description: Returns a project based on it's identifier.
      operationId: GetProject
      parameters:
        - name: id
          in: path
          description: Identifier of project to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: project response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
    put:
      summary: "Update a project."
      operationId: UpdateProject
      parameters:
        - name: id
          in: path
          description: Identifier of project to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatedProject'
      responses:
        '201':
          description: project updated response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
  /projects/{project_id}/issues:
    post:
      summary: "Create a issue."
      operationId: NewIssue
      parameters:
        - name: project_id
          in: path
          description: Identifier of project to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewIssue'
      responses:
        '201':
          description: issue created response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Issue'
    get:
      summary: "Get a list of issues."
      operationId: Issues
      parameters:
        - name: project_id
          in: path
          description: Identifier of project
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/q'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: issues response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IssuesPage'
  /projects/{project_id}/issues/{id}:
    get:
      description: Returns a issue based on it's identifier.
      operationId: GetIssue
      parameters:
        - name: project_id
          in: path
          description: Identifier of project
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Identifier of issue to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: issue response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
    put:
      description: Update an issue based on it's identifier.
      operationId: UpdateIssue
      parameters:
        - name: project_id
          in: path
          description: Identifier of project
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Identifier of issue to update
          required: true
          schema:
            type: string
      responses:
        '200':
          description: issue response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatedIssue'
  /projects/{project_id}/issues/{issue_id}/comments:
    post:
      summary: "Create a comment on a issue."
      operationId: NewComment
      parameters:
        - name: project_id
          in: path
          description: Identifier of project
          required: true
          schema:
            type: string
        - name: issue_id
          in: path
          description: Identifier of issue to attach the comment.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewComment'
      responses:
        '201':
          description: comment created response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
    get:
      summary: "Get a list of Comments."
      operationId: Comments
      parameters:
        - name: project_id
          in: path
          description: Identifier of project
          required: true
          schema:
            type: string
        - name: issue_id
          in: path
          description: Identifier of issue to list comments.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/q'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: comments response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentsPage'
  /projects/{project_id}/issues/{issue_id}/comments/{id}:
    get:
      description: Returns a comment based on it's identifier.
      operationId: GetComment
      parameters:
        - name: project_id
          in: path
          description: Identifier of project
          required: true
          schema:
            type: string
        - name: issue_id
          in: path
          description: Identifier of issue to fetch
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Identifier of comment to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: comment response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
  /projects/{project_id}/issues/{issue_id}/comments/{id}:
    put:
      description: Updates a comment based on it's identifier.
      operationId: UpdateComment
      parameters:
        - name: project_id
          in: path
          description: Identifier of project
          required: true
          schema:
            type: string
        - name: issue_id
          in: path
          description: Identifier of issue to fetch
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Identifier of comment to update
          required: true
          schema:
            type: string
      responses:
        '200':
          description: comment response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatedComment'
  /users:
    get:
      summary: "Get a list of users."
      operationId: Users
      parameters:
        - $ref: '#/components/parameters/q'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: users response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UsersPage'
  /users/{id}:
    get:
      description: Returns a user based on identifier.
      operationId: GetUser
      parameters:
        - name: id
          in: path
          description: Identifier of user to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
components:
  parameters:
    q:
      name: q
      in: query
      description: Used to query by name in a list operation.
      schema:
        type: string
        default: ""
    offset:
      name: offset
      in: query
      description: Used to request the next page in a list operation.
      schema:
          type: integer
          format: int64
          default: 0
    limit:
      name: limit
      in: query
      description: Used to specify the maximum number of records which are returned in the next page.
      schema:
        type: integer
        format: int64
        default: 50
    filterIssues:
      name: filter
      in: query
      style: pipeDelimited
      explode: true
      schema:
        type: array
        uniqueItems: true
        items:
          type: string
  schemas:
    NewCustomer:
      required:
        - name
        - labels
      properties:
        name:
          type: string
          description: The name of the customer.
          example: New Customer
        description:
          type: string
          description:
            A description of the customer, with some background.
        labels:
          type: array
          description: Labels assigned to an entity.
          items:
            type: string
    UpdatedCustomer:
      allOf:
        - $ref: '#/components/schemas/NewCustomer'
        - required:
          - version
          properties:
            version:
              type: integer
              format: int64
    Customer:
      title: Customer
      type: object
      required:
        - id
        - name
        - labels
        - created_at
        - updated_at
      properties:
        id:
          type: string
          description: Customer identifier.
          example: 0123456789ABCDEFGHJKMNPQRSTVWXYZ
        name:
          type: string
          description: The name of the customer.
          example: New Customer
        description:
          type: string
          description:
            A description of the customer, with some background.
        labels:
          type: array
          description: Labels assigned to an entity.
          items:
            type: string
        updated_at:
          type: string
          format: date-time
          description: The timestamp the customer was last updated
        created_at:
          type: string
          format: date-time
          description: The timestamp the customer was created
    CustomersPage:
      required:
        - customers
      properties:
        customers:
          type: array
          items:
            $ref: '#/components/schemas/Customer'
    NewProject:
      required:
        - name
        - labels
      properties:
        name:
          type: string
          description: The name of the project.
          example: New Project
        description:
          type: string
          description:
            A description of the project, with some background.
        labels:
          type: array
          description: Labels assigned to an entity.
          items:
            type: string
    UpdatedProject:
      allOf:
        - $ref: '#/components/schemas/NewProject'
        - required:
          - version
          properties:
            version:
              type: integer
              format: int64
    Project:
      title: Project
      type: object
      required:
        - id
        - name
        - labels
        - created_at
        - updated_at
      properties:
        id:
          type: string
          description: Project identifier.
          example: 0123456789ABCDEFGHJKMNPQRSTVWXYZ
        name:
          type: string
          description: The name of the Project.
          example: New Project
        description:
          type: string
          description:
            A description of the project, with some background.
        labels:
          type: array
          description: Labels assigned to an entity.
          items:
            type: string
        updated_at:
          type: string
          format: date-time
          description: The timestamp the Project was last updated
        created_at:
          type: string
          format: date-time
          description: The timestamp the Project was created
    ProjectsPage:
      required:
        - projects
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
    NewIssue:
      required:
        - subject
        - content
        - severity
        - category
        - labels
      properties:
        subject:
          type: string
          description: A subject of the issue
          example: Please fix the error
        content:
          type: string
          description:
            The content associated with the issue, any background,
            or details required to help resolve it.
        severity:
          type: string
          description: A severity of the Issue.
          example: critical
        category:
          type: string
          description: A category of the Issue.
          example: bug
        labels:
          type: array
          description: Labels assigned to an entity.
          items:
            type: string
    UpdatedIssue:
      allOf:
        - $ref: '#/components/schemas/NewIssue'
        - required:
          - version
          properties:
            version:
              type: integer
              format: int64
    Issue:
      title: Issue
      type: object
      required:
        - id
        - subject
        - state
        - severity
        - category
        - labels
        - created_at
        - updated_at
      properties:
        id:
          type: string
          description: Issue identifier.
          example: 0123456789ABCDEFGHJKMNPQRSTVWXYZ
        reporter:
          $ref: '#/components/schemas/User'
        assignee:
          $ref: '#/components/schemas/User'
        subject:
          type: string
          description: A subject of the Issue.
          example: Please fix the error
        state:
          type: string
          description: The state of the Issue.
          example: open
        severity:
          type: string
          description: The severity of the Issue.
          example: critical
        category:
          type: string
          description: The category of the Issue.
          example: bug
        content:
          type: string
          description:
            The content associated with the Issue, any background,
            or details required to help resolve it.
        labels:
          type: array
          description: Labels assigned to an entity.
          items:
            type: string
        comments:
          $ref: '#/components/schemas/CommentsPage'
        updated_at:
          type: string
          format: date-time
          description: The timestamp the Issue was last updated
        created_at:
          type: string
          format: date-time
          description: The timestamp the Issue was created
    IssuesPage:
      required:
        - issues
      properties:
        issues:
          type: array
          items:
            $ref: '#/components/schemas/Issue'
    NewComment:
      required:
        - content
      properties:
        content:
          type: string
          description:
            The content associated with the comment.
    UpdatedComment:
      allOf:
        - $ref: '#/components/schemas/NewComment'
        - required:
          - version
          properties:
            version:
              type: integer
              format: int64
    Comment:
      title: Comment
      type: object
      required:
        - id
        - author
        - content
        - created_at
        - updated_at
      properties:
        id:
          type: string
          description: Comment identifier.
          example: 0123456789ABCDEFGHJKMNPQRSTVWXYZ
        author:
          $ref: '#/components/schemas/User'
        content:
          type: string
          description: The content associated with the Comment.
        updated_at:
          type: string
          format: date-time
          description: The timestamp the Comment was last updated.
        created_at:
          type: string
          format: date-time
          description: The timestamp the Comment was created.
    CommentsPage:
      required:
        - comments
      properties:
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    User:
      title: User
      type: object
      required:
        - id
        - email
        - name
        - created_at
        - updated_at
      properties:
        id:
          type: string
          description: User identifier.
          example: 0123456789ABCDEFGHJKMNPQRSTVWXYZ
        name:
          type: string
          description: Name of the User.
          example: John Doe
        email:
          type: string
          description: Email of the User.
          example: john.doe@example.com
        updated_at:
          type: string
          format: date-time
          description: The timestamp the User was last updated.
        created_at:
          type: string
          format: date-time
          description: The timestamp the User was created.
    UsersPage:
      required:
        - users
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
