// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 20190721131113_extensions.down.sql (32B)
// 20190721131113_extensions.up.sql (1.287kB)
// 20190723044115_customer_projects.down.sql (43B)
// 20190723044115_customer_projects.up.sql (802B)
// 20190726175158_issues.down.sql (19B)
// 20190726175158_issues.up.sql (835B)
// 20190726201649_comments.down.sql (21B)
// 20190726201649_comments.up.sql (609B)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __20190721131113_extensionsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xc8\xcb\x57\xc8\x4b\x4d\x4d\x51\x28\xc9\x57\x28\xcd\xcb\xc9\x4f\x4c\x51\x48\xad\x28\x49\xcd\x2b\xce\xcc\xcf\x2b\xe6\x02\x04\x00\x00\xff\xff\x15\xf6\x0f\xb7\x20\x00\x00\x00")

func _20190721131113_extensionsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__20190721131113_extensionsDownSql,
		"20190721131113_extensions.down.sql",
	)
}

func _20190721131113_extensionsDownSql() (*asset, error) {
	bytes, err := _20190721131113_extensionsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20190721131113_extensions.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9b, 0x6, 0x4a, 0xb6, 0xfd, 0xb7, 0xb5, 0xac, 0xd1, 0x74, 0x68, 0xcf, 0x7c, 0xc1, 0xe, 0xc3, 0x3d, 0x44, 0x9b, 0x8c, 0xe1, 0x8d, 0xe7, 0x77, 0x82, 0x3e, 0x7d, 0xa8, 0x4f, 0xf2, 0x74, 0xed}}
	return a, nil
}

var __20190721131113_extensionsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x4f\x8f\x23\x45\x0c\xc5\xef\xf9\x14\x4f\x73\x02\x29\x7f\xe0\xca\x9e\x10\x04\x69\x04\x9a\x01\x26\x2b\xed\x0d\x79\xaa\x9d\x6e\x6b\xab\xab\x6a\x6d\x57\x7a\xfa\xdb\xa3\xaa\x84\x11\x08\x09\x85\x53\xa2\x96\xed\xf7\xde\xcf\xae\xdd\x0e\xa7\x89\x11\xc4\xf9\xcd\x31\xe7\xa1\x46\x46\xd1\x7c\x91\x81\x0d\x84\x40\xc6\x3b\x49\xc6\xc9\xc4\xe5\xc2\x08\x13\x29\x05\x67\x85\xb9\x4a\x1a\xe1\x6b\xe1\xed\x6d\xc0\x1e\x47\x33\x4e\x2e\x14\xe3\xba\x85\xf8\x66\xb7\x83\x24\x67\x4d\xed\x0b\x02\xc5\x68\x88\x79\x61\xc5\x32\x71\x42\xc8\x73\xa1\x3e\xe6\x42\xb1\xb2\xed\xf1\xec\x13\xeb\x22\xc6\xad\x1d\xaf\x3c\xd1\xa5\x19\x89\x73\x36\x07\xbf\x51\xf0\xb8\x22\xca\x67\x46\x17\x6c\x02\x93\x7b\xb1\xef\x0e\x87\x65\x59\xf6\x25\x9b\x8f\xca\xf6\x25\xee\xb3\x8e\x87\x21\x07\x3b\x7c\xfb\xcd\xe1\x66\x6f\xf2\x39\x6e\x7e\xf8\xfd\xf8\xfd\xe9\x88\xe3\xa7\xd3\xf1\xe9\xe5\xf1\xf9\x09\x8f\x3f\xe1\xe9\xf9\x84\xe3\xa7\xc7\x97\xd3\x0b\x1e\xae\xb5\x0f\x1f\x36\x9b\x0e\x47\xec\x2f\x2c\x32\x97\xc8\x33\x27\x37\xf8\xc4\x98\xcc\xb3\x32\x06\x72\xea\x10\x70\xce\x0d\x4a\xee\x71\x8c\xdd\x90\xcf\xf8\xcc\xeb\xa1\x47\x43\x21\x51\xc3\x22\x3e\x49\x02\xc1\x24\x8d\x91\x9b\xc4\xaf\x57\xcb\x2f\xbf\xfd\x72\x85\xb0\xbf\x8a\x06\x4a\x78\x65\x54\xe3\x73\x8d\x90\x84\x0b\xa9\xe4\x6a\xb0\xc0\xa9\xfd\xb5\x2d\xac\x86\x09\x64\xd0\xbc\x5c\x47\x63\xa6\xb4\x82\xdc\x55\x5e\xab\x73\x33\x4a\x7d\x09\xa4\x0c\x25\xe5\xb8\x36\x88\xb3\x24\x1e\xb6\x68\x7e\x79\x96\x9d\xb9\xd6\xe0\x55\x79\xe8\x69\xf6\xf8\x99\x57\x03\xa5\xe1\xb6\x95\xde\x6d\x2d\xfe\xda\xa9\xdf\x56\x6f\xf7\xd2\xbf\x92\xba\x8f\xfe\xb5\xf6\x9d\x3e\xa3\x8c\x7f\xb8\x8e\xf3\xbf\x6e\xf3\x5c\x53\x70\xc9\xe9\x6a\x34\x17\x56\xf2\xac\xd6\xb7\x30\xb0\xb3\xce\x92\xfa\x7d\x4e\xdd\xbb\x44\x52\xf1\xb5\xed\x84\x62\x99\x28\xd5\x99\x55\x42\x53\xe9\x91\x5e\xc9\x78\x40\x4e\x70\x95\x51\x69\xc6\x4c\x1e\x26\x49\xe3\xb6\x01\x5e\x38\xc6\xf6\x2b\x69\xe0\xb7\x77\x31\x84\x48\x66\x37\xca\xb0\x5a\x4a\x56\xc7\x99\xcc\x61\x4c\xda\xdb\x9b\x9f\x26\x72\xb3\xf0\x7f\xd1\x95\xb1\x85\xbf\x0f\xdd\x8d\xd4\xdf\xd8\xd5\x2a\xc3\x2e\x9b\x95\xff\xa0\xe7\x19\x23\xa7\x16\x88\x51\x93\x5c\x58\xad\xbf\xd5\x9a\xe4\x4b\x65\xc8\xd0\xde\xf3\x59\x58\x0d\x5f\x7d\xfc\xf8\xf8\xa3\x7d\x8d\xda\x8e\xb7\x69\xe4\xc4\x0d\xa8\xf1\x85\x95\x22\xcc\x29\x0d\xa4\x03\x28\x8e\x59\xc5\xa7\xd9\xda\x31\xb3\x72\xbf\x20\x8a\x96\xff\x29\x5c\x34\x0f\x35\x30\x02\xab\x93\x24\x58\xe1\x20\x14\xd1\x74\x10\x72\x6a\x03\xfd\x6e\x56\xef\x69\xef\xc3\xf5\x5e\xfe\xf0\x61\xf3\x67\x00\x00\x00\xff\xff\xaa\x7d\x21\x8c\x07\x05\x00\x00")

func _20190721131113_extensionsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__20190721131113_extensionsUpSql,
		"20190721131113_extensions.up.sql",
	)
}

func _20190721131113_extensionsUpSql() (*asset, error) {
	bytes, err := _20190721131113_extensionsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20190721131113_extensions.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5, 0x65, 0x51, 0x58, 0x2c, 0x49, 0xf0, 0x93, 0xb2, 0xdf, 0x71, 0x97, 0x93, 0x49, 0xe7, 0xc2, 0xd2, 0x28, 0x24, 0x49, 0x23, 0xc7, 0x39, 0xf3, 0x5e, 0xea, 0x3, 0xb7, 0x7, 0xe8, 0x97, 0x30}}
	return a, nil
}

var __20190723044115_customer_projectsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x28\xca\xcf\x4a\x4d\x2e\x29\xb6\xe6\x42\x12\x4c\x2e\x2d\x2e\xc9\xcf\x4d\x2d\x2a\xb6\xe6\x02\x04\x00\x00\xff\xff\x84\x60\x4b\xc3\x2b\x00\x00\x00")

func _20190723044115_customer_projectsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__20190723044115_customer_projectsDownSql,
		"20190723044115_customer_projects.down.sql",
	)
}

func _20190723044115_customer_projectsDownSql() (*asset, error) {
	bytes, err := _20190723044115_customer_projectsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20190723044115_customer_projects.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x54, 0x4b, 0xad, 0x2b, 0x61, 0xdd, 0x84, 0xbb, 0xe9, 0x1a, 0x95, 0x0, 0xe5, 0xfb, 0x4c, 0x39, 0x2, 0x1b, 0x1c, 0xe5, 0x93, 0x6, 0x79, 0x60, 0xc1, 0x65, 0x33, 0x25, 0xa5, 0x7e, 0xde, 0x98}}
	return a, nil
}

var __20190723044115_customer_projectsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x92\x4d\x4f\x83\x40\x10\x86\xef\xfc\x8a\x37\x5c\x0a\x49\x7b\xf3\x54\x4f\x48\xa7\x86\x88\x8b\x6e\x97\x43\x63\x0c\x41\x98\xe8\x9a\xf2\x11\x58\xac\xd1\xf8\xdf\x4d\x0b\x6d\xe9\xc5\xa4\x47\x8f\xbb\xf3\x3e\x0c\xfb\xcc\xf8\x92\x3c\x45\x50\xde\x4d\x48\xc8\xba\xd6\x54\x05\x37\x2d\x1c\x0b\x00\x6c\x9d\xdb\xe8\x3a\x9d\x63\x41\x4b\x2f\x0e\xd5\xfe\x90\xbc\x72\xc9\x4d\x6a\x38\xf9\xb8\x72\x5c\x3c\xc8\xe0\xde\x93\x6b\xdc\xd1\x7a\xda\x53\x65\x5a\xb0\x8d\x4c\x1b\xfe\x34\x10\x91\x82\x88\xc3\x10\xb1\x08\x1e\x63\x1a\x22\x39\xb7\x59\xa3\x6b\xa3\xab\xd2\xc6\x2e\x37\xdc\x6f\xd2\x17\xde\xb4\xfd\xd5\xd3\xf3\x09\x3e\xf4\x9f\x7c\xff\x4c\xe6\xf3\xbe\x3a\x20\x59\xc3\xa9\xe1\x3c\x49\x8d\x0d\xa3\x0b\x6e\x4d\x5a\xd4\xd8\x6a\xf3\xb6\x3f\xe2\xab\x2a\xf9\xc8\x97\xd5\xd6\x71\x07\xb0\xab\xf3\x0b\x41\xcb\xbd\xb6\xac\x33\x63\x75\x53\xbd\x73\x66\x2e\x11\x76\xf8\xed\xc1\x75\x72\x44\x0e\x8f\xfd\xcb\xe2\xbf\xd6\xd7\x83\xa3\x7d\x81\xa3\xf3\x29\x46\x26\x86\x48\xbf\x2a\x70\xce\x24\x4d\x07\x25\xee\x3e\x32\x9b\xc1\x8f\xc4\x4a\x49\x2f\x10\xea\xf4\x89\xe3\x3c\x96\x91\xa4\xe0\x56\xf4\x5d\xc6\x1d\x20\x69\x49\x92\x84\x4f\xab\xf1\xbe\xef\x2a\x91\xc0\x82\x42\x52\x04\x49\x2b\x25\x03\x5f\xed\x06\xfe\x1b\x00\x00\xff\xff\x78\xf1\x88\x23\x22\x03\x00\x00")

func _20190723044115_customer_projectsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__20190723044115_customer_projectsUpSql,
		"20190723044115_customer_projects.up.sql",
	)
}

func _20190723044115_customer_projectsUpSql() (*asset, error) {
	bytes, err := _20190723044115_customer_projectsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20190723044115_customer_projects.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x11, 0x5a, 0x8b, 0x6e, 0xe2, 0x7a, 0x70, 0xe, 0x93, 0xb, 0x4e, 0xa4, 0x76, 0x30, 0xa6, 0x4e, 0xee, 0x3f, 0xbc, 0xb6, 0x42, 0xab, 0xd5, 0x3e, 0x22, 0x23, 0x64, 0xa3, 0xcf, 0xee, 0x55, 0x94}}
	return a, nil
}

var __20190726175158_issuesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xc8\x2c\x2e\x2e\x4d\x2d\xb6\xe6\x02\x04\x00\x00\xff\xff\xc5\x99\x96\xb8\x13\x00\x00\x00")

func _20190726175158_issuesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__20190726175158_issuesDownSql,
		"20190726175158_issues.down.sql",
	)
}

func _20190726175158_issuesDownSql() (*asset, error) {
	bytes, err := _20190726175158_issuesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20190726175158_issues.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8f, 0x23, 0xa6, 0xa2, 0xe1, 0xf, 0xbf, 0x46, 0x1f, 0x45, 0x8f, 0xc5, 0x12, 0xbb, 0xee, 0x1f, 0xde, 0x95, 0x8c, 0x30, 0xa7, 0x28, 0x4a, 0xd6, 0xfa, 0xae, 0x5b, 0x5a, 0x51, 0x56, 0x5e, 0xda}}
	return a, nil
}

var __20190726175158_issuesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\x4b\x6f\xc2\x30\x10\x84\xef\xfc\x8a\x55\x2e\x10\x09\x6e\x3d\xd1\x53\x0a\x4b\x85\x9a\x86\xca\x84\x03\xaa\xaa\xc8\x24\x5b\xea\x0a\x92\xc8\x5e\x43\x1f\xea\x7f\xaf\x42\x1e\x34\xf4\x71\xa0\x47\xef\xcc\x37\x5e\x79\x3c\x12\xe8\x85\x08\xa1\x77\xe5\x23\x28\x63\x2c\x19\xe8\x75\x00\x00\x1c\x95\x38\x60\xad\x4a\x60\x8c\x13\x6f\xe1\x87\x87\x43\xb4\xa6\x94\xb4\x64\x8a\x76\x17\x3d\xb7\x5f\x3a\x63\x6b\x38\xdb\x92\x8e\x1a\x24\x98\x85\x10\x2c\x7c\xbf\x32\xe4\x3a\x7b\xa6\x98\x7f\xd5\x35\xe5\x99\x66\xd2\xa7\x2a\x00\x0c\x06\x60\x0d\x69\x50\x09\xa5\xac\x1e\x15\xe9\x12\x91\xc6\xa8\x75\x4a\x54\x23\x95\x1d\xfe\x40\x8c\x5d\x15\x5b\x38\x10\x2b\xa6\x17\x3e\x5d\x22\xce\x52\xa6\x94\x1d\x28\xc4\x6a\x66\x58\x32\x95\x93\x53\xbb\xa1\x1d\x69\xc5\xaf\x2d\x7f\x2c\x99\xd6\x99\x6e\x0f\x37\x72\x45\x1b\x53\x8e\xee\x1f\x9a\x9c\xe6\x5d\xbb\xef\x1f\xdd\xe1\xb0\x54\xeb\x1c\x4d\x92\x29\x89\x64\xb1\x8e\xda\x92\x61\xb9\xcd\x61\xaf\xf8\xe9\x70\x84\xb7\x2c\xa5\x86\x4f\xb3\x7d\x53\x85\xcd\x93\xb3\xc0\x3b\x31\xbd\xf5\xc4\x12\x6e\x70\x09\x3d\x95\xf4\xe1\x4b\xa7\x7d\x38\xf6\xe7\x76\xaa\x17\x9e\xcc\x04\x4e\xaf\x83\x12\x38\xea\x2d\xd0\x05\x81\x13\x14\x18\x8c\x70\x5e\x67\x98\x6f\xf1\x2e\xcc\x02\x18\xa3\x8f\x21\x82\xc0\x79\x28\xa6\xa3\xf0\xc7\x5b\xea\x5f\xd2\x8a\x2d\x9a\xfe\x47\x66\xfd\x8d\xce\xcd\x74\x2f\x3b\x9f\x01\x00\x00\xff\xff\xb3\x8f\x8c\xd0\x43\x03\x00\x00")

func _20190726175158_issuesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__20190726175158_issuesUpSql,
		"20190726175158_issues.up.sql",
	)
}

func _20190726175158_issuesUpSql() (*asset, error) {
	bytes, err := _20190726175158_issuesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20190726175158_issues.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x98, 0xba, 0xe3, 0x9, 0xf1, 0xb6, 0x8d, 0x5f, 0x79, 0x1, 0x42, 0x9a, 0x52, 0xc9, 0x9d, 0x7e, 0x2d, 0x73, 0x2c, 0x6, 0x3d, 0x9d, 0xc9, 0xdb, 0x5d, 0x3e, 0x53, 0x56, 0xd6, 0x6, 0x7c, 0x16}}
	return a, nil
}

var __20190726201649_commentsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\xce\xcf\xcd\x4d\xcd\x2b\x29\xb6\xe6\x02\x04\x00\x00\xff\xff\x3f\x3c\x11\xc2\x15\x00\x00\x00")

func _20190726201649_commentsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__20190726201649_commentsDownSql,
		"20190726201649_comments.down.sql",
	)
}

func _20190726201649_commentsDownSql() (*asset, error) {
	bytes, err := _20190726201649_commentsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20190726201649_comments.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1e, 0x7c, 0x57, 0x36, 0x99, 0x73, 0x7c, 0x5c, 0x15, 0x15, 0x93, 0x73, 0xa7, 0xfb, 0x4b, 0x48, 0x69, 0xc2, 0xca, 0x17, 0xbe, 0xc8, 0x39, 0x54, 0xbd, 0xb1, 0xe, 0xc0, 0x56, 0x85, 0xea, 0x7}}
	return a, nil
}

var __20190726201649_commentsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x50\xbd\x6e\xf2\x40\x10\xec\x79\x8a\x11\x15\x96\x4c\xf7\x75\x5f\xe5\xc0\x12\xa1\x38\x26\x3a\x8e\x82\xca\xb2\xf0\x26\x5c\x24\xdf\xa1\xbb\xbd\x10\xe5\xe9\x23\xb0\x71\x20\x81\x14\x29\x77\xe7\x67\x77\x66\xa2\x28\xd3\x04\x9d\xdd\xe5\x84\x8d\x6b\x1a\xb6\x12\x30\x1a\x00\xc0\xd0\xd4\x43\xc4\x68\x6a\x4c\x69\x96\xad\x72\x7d\x1c\xca\x17\xb6\xec\x2b\xe1\xf2\xed\xdf\x28\x49\x5b\xe6\x26\x06\x71\x0d\xfb\xb2\x97\x14\x0b\x8d\x62\x95\xe7\x1d\x61\xe7\xdd\x2b\x6f\xe4\x26\x6e\x42\x88\x7c\x13\xad\xa2\x6c\x9d\xff\x8e\x1d\x20\x8c\xc7\x88\x81\x3d\x4c\xcd\x56\xcc\xb3\x61\xdf\x7d\xe4\xac\xb0\x95\x21\x84\xdf\xe5\xf4\xa5\xe7\x4a\xb8\x2e\xab\xc3\xda\x34\x1c\xa4\x6a\x76\xd8\x1b\xd9\x1e\x47\x7c\x38\xcb\x7d\x56\xeb\xf6\x7d\xbc\xb8\xab\xff\x24\x7c\x52\xf3\xc7\x4c\xad\xf1\x40\x6b\x8c\x4c\x9d\xe2\xac\xa7\x14\x5f\x9d\xa4\x38\xe5\x4f\x06\x5d\xa8\xd9\x42\xd1\xfc\xbe\x68\xa5\xe7\xcc\x0b\x8b\x5e\x06\x45\x33\x52\x54\x4c\x68\xd9\x2e\xc3\xaf\x07\x13\x2c\x0a\x4c\x29\x27\x4d\x50\xb4\xd4\x6a\x3e\xd1\x57\x2f\xb7\xcd\x5f\xd8\x1f\xea\xfe\xe9\x7e\xd5\x31\xf9\x3f\xf8\x0c\x00\x00\xff\xff\x51\x37\xe2\x45\x61\x02\x00\x00")

func _20190726201649_commentsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__20190726201649_commentsUpSql,
		"20190726201649_comments.up.sql",
	)
}

func _20190726201649_commentsUpSql() (*asset, error) {
	bytes, err := _20190726201649_commentsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20190726201649_comments.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3f, 0xd0, 0xa6, 0x6d, 0xbf, 0x1d, 0xef, 0xf5, 0xc7, 0xe6, 0xf9, 0xc4, 0xaa, 0xb0, 0xc3, 0x33, 0xeb, 0xd2, 0x1f, 0x32, 0xf2, 0xde, 0x17, 0x8, 0x1f, 0x51, 0xb3, 0x2d, 0x1a, 0xcb, 0xec, 0x41}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"20190721131113_extensions.down.sql": _20190721131113_extensionsDownSql,

	"20190721131113_extensions.up.sql": _20190721131113_extensionsUpSql,

	"20190723044115_customer_projects.down.sql": _20190723044115_customer_projectsDownSql,

	"20190723044115_customer_projects.up.sql": _20190723044115_customer_projectsUpSql,

	"20190726175158_issues.down.sql": _20190726175158_issuesDownSql,

	"20190726175158_issues.up.sql": _20190726175158_issuesUpSql,

	"20190726201649_comments.down.sql": _20190726201649_commentsDownSql,

	"20190726201649_comments.up.sql": _20190726201649_commentsUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"20190721131113_extensions.down.sql":        {_20190721131113_extensionsDownSql, map[string]*bintree{}},
	"20190721131113_extensions.up.sql":          {_20190721131113_extensionsUpSql, map[string]*bintree{}},
	"20190723044115_customer_projects.down.sql": {_20190723044115_customer_projectsDownSql, map[string]*bintree{}},
	"20190723044115_customer_projects.up.sql":   {_20190723044115_customer_projectsUpSql, map[string]*bintree{}},
	"20190726175158_issues.down.sql":            {_20190726175158_issuesDownSql, map[string]*bintree{}},
	"20190726175158_issues.up.sql":              {_20190726175158_issuesUpSql, map[string]*bintree{}},
	"20190726201649_comments.down.sql":          {_20190726201649_commentsDownSql, map[string]*bintree{}},
	"20190726201649_comments.up.sql":            {_20190726201649_commentsUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
